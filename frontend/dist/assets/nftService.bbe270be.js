var i=Object.defineProperty;var c=(r,e,t)=>e in r?i(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var s=(r,e,t)=>(c(r,typeof e!="symbol"?e+"":e,t),t);import{B as n}from"./baseService.23cbe74f.js";import"./index.ff1e2e34.js";class o{constructor(){s(this,"_baseService",new n)}async getAllNFTs(){try{return(await this._baseService.http.get("/nft")).data}catch(e){return this._baseService.apiErrorTreatment(e)}}async getNFTSummaryIdList(){try{return(await this._baseService.http.get("/nft/list/ids")).data}catch(e){return this._baseService.apiErrorTreatment(e)}}async getNFTMeasurements(e,t){try{return(await this._baseService.http.get(`/nft/measure/${e}/${t}`)).data}catch(a){return this._baseService.apiErrorTreatment(a)}}async createNFT(e){try{return(await this._baseService.http.post("/nft/create",e)).data}catch(t){return this._baseService.apiErrorTreatment(t)}}async updateNFT(e){try{return(await this._baseService.http.put(`/nft/${e._id}`,e)).data}catch(t){return this._baseService.apiErrorTreatment(t)}}async deleteNFT(e){try{return(await this._baseService.http.delete(`/nft/${e}`)).data}catch(t){return this._baseService.apiErrorTreatment(t)}}}export{o as default};
